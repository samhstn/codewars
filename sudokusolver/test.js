var test = require('tape');
var index = require('./script.js');

test('testing if working!', function(t){
    t.equal(index.test(5), 5);
    t.end();
});

test('testing setup function', function (t){
    var puzzle =[
                [5,3,0,0,7,0,0,0,0],
                [6,0,0,1,9,5,0,0,0],
                [0,9,8,0,0,0,0,6,0],
                [8,0,0,0,6,0,0,0,3],
                [4,0,0,8,0,3,0,0,1],
                [7,0,0,0,2,0,0,0,6],
                [0,6,0,0,0,0,2,8,0],
                [0,0,0,4,1,9,0,0,5],
                [0,0,0,0,8,0,0,7,9]];
    var expected =[
                [5,3,[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9],7,[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9]],
                [6,[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9],1,9,5,[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9]],
                [[1,2,3,4,5,6,7,8,9],9,8,[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9],6,[1,2,3,4,5,6,7,8,9]],
                [8,[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9],6,[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9],3],
                [4,[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9],8,[1,2,3,4,5,6,7,8,9],3,[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9],1],
                [7,[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9],2,[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9],6],
                [[1,2,3,4,5,6,7,8,9],6,[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9],2,8,[1,2,3,4,5,6,7,8,9]],
                [[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9],4,1,9,[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9],5],
                [[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9],8,[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9],7,9]];
    t.deepEqual(index.setup(puzzle), expected);
    t.end();
});

var puzzle3 = [
            [5,3,[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9],7,[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9]],
            [6,[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9],1,9,5,[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9]],
            [[1,2,3,4,5,6,7,8,9],9,8,[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9],6,[1,2,3,4,5,6,7,8,9]],
            [8,[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9],6,[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9],3],
            [4,[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9],8,[1,2,3,4,5,6,7,8,9],3,[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9],1],
            [7,[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9],2,[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9],6],
            [[1,2,3,4,5,6,7,8,9],6,[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9],2,8,[1,2,3,4,5,6,7,8,9]],
            [[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9],4,1,9,[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9],5],
            [[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9],8,[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9],7,9]];
var expected3 = [
    [5,3,[1,2,4,6,8,9],[1,2,4,6,8,9],7,[1,2,4,6,8,9],[1,2,4,6,8,9],[1,2,4,6,8,9],[1,2,4,6,8,9]],
    [6,[2,3,4,7,8],[2,3,4,7,8],1,9,5,[2,3,4,7,8],[2,3,4,7,8],[2,3,4,7,8]],
    [[1,2,3,4,5,7],9,8,[1,2,3,4,5,7],[1,2,3,4,5,7],[1,2,3,4,5,7],[1,2,3,4,5,7],6,[1,2,3,4,5,7]],
    [8,[1,2,4,5,7,9],[1,2,4,5,7,9],[1,2,4,5,7,9],6,[1,2,4,5,7,9],[1,2,4,5,7,9],[1,2,4,5,7,9],3],
    [4,[2,5,6,7,9],[2,5,6,7,9],8,[2,5,6,7,9],3,[2,5,6,7,9],[2,5,6,7,9],1],
    [7,[1,3,4,5,8,9],[1,3,4,5,8,9],[1,3,4,5,8,9],2,[1,3,4,5,8,9],[1,3,4,5,8,9],[1,3,4,5,8,9],6],
    [[1,3,4,5,7,9],6,[1,3,4,5,7,9],[1,3,4,5,7,9],[1,3,4,5,7,9],[1,3,4,5,7,9],2,8,[1,3,4,5,7,9]],
    [[2,3,6,7,8],[2,3,6,7,8],[2,3,6,7,8],4,1,9,[2,3,6,7,8],[2,3,6,7,8],5],
    [[1,2,3,4,5,6],[1,2,3,4,5,6],[1,2,3,4,5,6],[1,2,3,4,5,6],8,[1,2,3,4,5,6],[1,2,3,4,5,6],7,9]];

test('testing row removal function, testing if every 5, 3 and 7 are removed from the top row, etc.', function(t){
    t.deepEqual(index.solveRow(puzzle3)[0], expected3[0], '#first row');
    t.deepEqual(index.solveRow(puzzle3)[1], expected3[1], '#second row');
    t.deepEqual(index.solveRow(puzzle3)[2], expected3[2], '#third row');
    t.deepEqual(index.solveRow(puzzle3)[3], expected3[3], '#fourth row');
    t.deepEqual(index.solveRow(puzzle3)[4], expected3[4], '#fifth row');
    t.deepEqual(index.solveRow(puzzle3)[5], expected3[5], '#sixth row');
    t.deepEqual(index.solveRow(puzzle3)[6], expected3[6], '#seventh row');
    t.deepEqual(index.solveRow(puzzle3)[7], expected3[7], '#eighth row');
    t.deepEqual(index.solveRow(puzzle3)[8], expected3[8], '#ninth row');
    t.deepEqual(index.solveRow(puzzle3), expected3, '#whole thing');
    t.end();
});

var puzzle4 = [
            [5,3,[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9],7,[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9]],
            [6,[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9],1,9,5,[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9]],
            [[1,2,3,4,5,6,7,8,9],9,8,[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9],6,[1,2,3,4,5,6,7,8,9]],
            [8,[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9],6,[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9],3],
            [4,[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9],8,[1,2,3,4,5,6,7,8,9],3,[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9],1],
            [7,[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9],2,[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9],6],
            [[1,2,3,4,5,6,7,8,9],6,[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9],2,8,[1,2,3,4,5,6,7,8,9]],
            [[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9],4,1,9,[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9],5],
            [[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9],8,[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9],7,9]];
var expected4 =[
            [5,3,0,0,7,0,0,0,0],
            [6,0,0,1,9,5,0,0,0],
            [[1,2,3,9],9,8,0,0,0,0,6,0],
            [8,0,0,0,6,0,0,0,3],
            [4,0,0,8,0,3,0,0,1],
            [7,0,0,0,2,0,0,0,6],
            [[1,2,3,9],6,0,0,0,0,2,8,0],
            [[1,2,3,9],0,0,4,1,9,0,0,5],
            [[1,2,3,9],0,0,0,8,0,0,7,9]];

// console.log(index.solveCol(puzzle4));

// test('#4 testing column removal function, testing if 4,5,6,7 and 8 are removed from the first column', function(t){
//     var actual = 5;
//     var expected = 5;
//     console.log(index.solveCol(puzzle4));
//     t.deepEqual(actual, expected, '#first column');
//     t.end();
// });

test('testing column removal function, testing if 4,5,6,7 and 8 are removed from the first column', function(t){
    var actual = [];
    // console.log(index.solveCol(puzzle4));
    for(w=0;w<9;w++){
        actual.push(index.solveCol(puzzle4)[w][0]);
    }
    var expected = [];
    for(i=0;i<9;i++){
        expected.push(expected4[i][0]);
    }
    t.deepEqual(actual, expected, '#first column');
    t.end();
});

var puzzle5 = [
            [5,3,[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9],7,[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9]],
            [6,[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9],1,9,5,[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9]],
            [[1,2,3,4,5,6,7,8,9],9,8,[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9],6,[1,2,3,4,5,6,7,8,9]],
            [8,[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9],6,[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9],3],
            [4,[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9],8,[1,2,3,4,5,6,7,8,9],3,[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9],1],
            [7,[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9],2,[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9],6],
            [[1,2,3,4,5,6,7,8,9],6,[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9],2,8,[1,2,3,4,5,6,7,8,9]],
            [[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9],4,1,9,[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9],5],
            [[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9],8,[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9],7,9]];

test('testing the box function', function(t){
    var actual = index.solveBox(puzzle5);
    t.deepEqual(actual[0], [5,3,[1,2,4,7],[2,3,4,6,8],7,[2,3,4,6,8],[1,2,3,4,5,7,8,9],[1,2,3,4,5,7,8,9],[1,2,3,4,5,7,8,9]], '#box function');
    t.end();
});

var puzzle6 = [
            [5,3,[4],6,7,8,9,1,2],
            [6,7,2,1,9,5,3,4,8],
            [1,9,8,3,4,2,5,6,7],
            [8,5,9,[7],6,1,4,2,3],
            [4,2,6,8,5,3,7,9,1],
            [7,1,3,9,2,4,8,5,6],
            [9,6,1,5,3,7,2,8,4],
            [2,8,7,4,1,9,6,3,5],
            [3,4,5,2,8,6,1,7,9]];

test('testing the clearArrays function', function(t){
    var actual = index.clearArrays(puzzle6);
    var expected = [
                [5,3,4,6,7,8,9,1,2],
                [6,7,2,1,9,5,3,4,8],
                [1,9,8,3,4,2,5,6,7],
                [8,5,9,7,6,1,4,2,3],
                [4,2,6,8,5,3,7,9,1],
                [7,1,3,9,2,4,8,5,6],
                [9,6,1,5,3,7,2,8,4],
                [2,8,7,4,1,9,6,3,5],
                [3,4,5,2,8,6,1,7,9]];
    t.deepEqual(actual, expected, '#arrays are cleared');
    t.end();
});

test('testing the is finished', function(t){
    var actual = index.isFinished(puzzle5);
    var expected = false;
    t.deepEqual(actual, expected, '#isFinished function');
    t.end();
});

var puzzle7 = [
            [5,3,0,0,7,0,0,0,0],
            [6,0,0,1,9,5,0,0,0],
            [0,9,8,0,0,0,0,6,0],
            [8,0,0,0,6,0,0,0,3],
            [4,0,0,8,0,3,0,0,1],
            [7,0,0,0,2,0,0,0,6],
            [0,6,0,0,0,0,2,8,0],
            [0,0,0,4,1,9,0,0,5],
            [0,0,0,0,8,0,0,7,9]];

test('testing the is finished function for true', function(t){
    var actual = index.isFinished(puzzle7);
    var expected = true;
    t.deepEqual(actual, expected, '#isFinished function');
    t.end();
});

var input = [
    [5,3,0,0,7,0,0,0,0],
    [6,0,0,1,9,5,0,0,0],
    [0,9,8,0,0,0,0,6,0],
    [8,0,0,0,6,0,0,0,3],
    [4,0,0,8,0,3,0,0,1],
    [7,0,0,0,2,0,0,0,6],
    [0,6,0,0,0,0,2,8,0],
    [0,0,0,4,1,9,0,0,5],
    [0,0,0,0,8,0,0,7,9]];

// test('whole function', function(t){
//     var expected = [
//                 [5,3,4,6,7,8,9,1,2],
//                 [6,7,2,1,9,5,3,4,8],
//                 [1,9,8,3,4,2,5,6,7],
//                 [8,5,9,7,6,1,4,2,3],
//                 [4,2,6,8,5,3,7,9,1],
//                 [7,1,3,9,2,4,8,5,6],
//                 [9,6,1,5,3,7,2,8,4],
//                 [2,8,7,4,1,9,6,3,5],
//                 [3,4,5,2,8,6,1,7,9]];
//     t.deepEqual(sudoku(input), expected, '#worked!');
//     t.end();
// });
